#include <iostream>
#include <stdlib.h>
#include <cmath>
#include <algorithm>
#include <vector>

class PatientsData{

	public:
		int type;
		int begin;
		int end;
		int sessions;
		int interruptions;
		int machine;
		float first_time;
		float time_ses;
		std::vector< std::vector<int> > availability;
};

using namespace std;

bool sort_list_patients(PatientsData a, PatientsData b){
	if(a.type < b.type)
		return true;
	return false;
}

bool saturday(int day, int initial_day){
	if(((day + initial_day - 1) % 7 )== 6)
		return true;
	
	return false;
}

bool sunday(int day, int initial_day){
	if((day + initial_day - 1) % 7 == 0)
		return true;
	
	return false;
}

bool friday(int day, int initial_day){
	if((day + initial_day - 1) % 7 == 5)
		return true;
	return false;
}

bool week_day_function(int day, int initial_day){
	if(((day + initial_day - 1) % 7 <= 5) && ((day + initial_day - 1) % 7 >= 1))
		return true;
	return false;
}

int random_generator(int min, int max){
	return min + ((double)(max - min) * (double)rand() / ((double) RAND_MAX));
}

int roullete_doctor(int *sesDoc, int nDoc){
	int total = 0;
	
	for(int i = 0; i < nDoc; i++)
		total += sesDoc[i];
	
	int r = random_generator(0, total);
	int acum = 0;
	for(int i = 0; i < nDoc; i++){
		acum += sesDoc[i];
		if(acum >= r)
			return i + 1;
	}
	
	return 0;
}

int sessions_pat(int groups, vector<float> prob, vector<int> ses){
  
	if(groups == 0)
		return 0;
  
	float r = (double) rand() / ((double) RAND_MAX);
	float sum = 0.0;

	for(int i = 0; i < groups; i++){
		sum += prob[i];
		if(r < sum){
			return ses[i];
		}
	}	
	
	return ses[groups - 1];
}

int set_machine(float r, int n, vector<float> p){
	float sum = 0.0;
	for(int i = 0; i < n; i++){
		sum += p[i];
		if(r < sum)
		      return i+1;
	}
	return n;
}

int main(int argc, char *argv[])
{
	/*Datos por entrada*/
	int seed;
	
	/*Inicializar semilla*/
	seed = atoi(argv[1]);
	srand(seed);
	
	/*******************Leer entrada*******************/
	int nDays;
	cin >> nDays;
	cout << nDays << " ";
	
	int working_days;
	cin >> working_days;
	cout << working_days << " ";
	
	int shifts;
	cin >> shifts;
	cout << shifts << " ";
	
	int PAT_DAY;
	cin >> PAT_DAY;
	
	int categories;
	cin >> categories;
	
	float time;
	cin >> time;
	cout << time << " ";
	
	int n_mach;
	cin >> n_mach;
	cout << n_mach  << " ";
	
	vector<int>machines;
	for(int i = 0; i < n_mach; i++){
		int aux;
		cin >> aux;
		machines.push_back(aux);
		cout << aux << " ";
	}
	
	vector<float> p;	
	for(int i = 0; i < categories; i++){
		float aux;
		cin >> aux;
		p.push_back(aux);
	}
	
	vector<float> prob_interruption;
	for(int i = 0; i < categories; i++){
		float aux;
		cin >> aux;
		prob_interruption.push_back(aux);
	}
	
	float time_ses;
	cin >> time_ses;
	
	float first_time;
	cin >> first_time;
	
	vector<int> delay;
	for(int i = 0; i < categories; i++){
		int aux;
		cin >> aux;
		delay.push_back(aux);
	}
	
	vector<int> groups;
	for(int i = 0; i < categories; i++){
		int aux;
		cin >> aux;
		groups.push_back(aux);
	}
	
	vector<vector<int> > ses;
	vector<vector<float> > prob_ses;
	ses.resize(categories);
	prob_ses.resize(categories);
	for(int i = 0; i < categories; i++){
		for(int j = 0; j < groups[i]; j++){
		      int aux;
		      cin >> aux;
		      ses[i].push_back(aux);
		      float aux2;
		      cin >> aux2;
		      prob_ses[i].push_back(aux2);
		}
	}
	
	vector<vector<float> > prob_mach;
	prob_mach.resize(categories);
	for(int i = 0; i < categories; i++){
		for(int j = 0; j < n_mach; j++){
			float aux; 
			cin >> aux;
			prob_mach[i].push_back(aux);
		}
	}
	
	cout << endl;
	/*******************Fin Leer entrada*******************/

	for(int d = 1; d <= nDays; d++){
	  
		int total_pat;
		std::vector<PatientsData> list_patients;
		total_pat = random_generator(0, PAT_DAY);
		
		for(int patient = 1; patient <= total_pat; patient++){
			
			PatientsData aux;
			int type = 0;
			int sessions = 0;
			int beg, end, interruptions, machine;
			double aleatorio = ((double)rand() / ((double) RAND_MAX));
			
			float r = 0.0;
			for(int i = 0; i < categories; i++){
				r += p[i];
				if(aleatorio < r){
				      type = i+1;
				      beg = d + 1;
				      end = beg + delay[i];
				      sessions = sessions_pat(groups[i], prob_ses[i], ses[i]);
				      //Numero de interrupciones
				      interruptions = random_generator(0,ceil(prob_interruption[i] * (float)sessions));
				      double r_m = ((double)rand() / ((double) RAND_MAX));
				      machine = set_machine(r_m, n_mach, prob_mach[i]);
				      
				}
			}
			
			aux.type = type;
			aux.begin = beg;
			aux.end = end;
			aux.sessions = sessions;
			aux.interruptions = interruptions;
			aux.machine = machine;
			aux.first_time = first_time;
			aux.time_ses = time_ses;
			
			/*Availability*/
			vector <vector<int> > availability;
			availability.resize(working_days);
			for(int w = 0; w < working_days; w++){
				int sum = 0;
				do{
				      availability[w].clear();
				      for(int s = 1; s <= shifts; s++){
					     float r = ((double)rand() / ((double) RAND_MAX));
					     int shift_aux = 0;
					     if(r < ((float)s)/((float)shifts))
						    shift_aux = 1;
					     availability[w].push_back(shift_aux);
				      }
				      
				      sum = 0;
				      for(int s = 1; s <= shifts; s++)
					      sum+=availability[w][s-1];
				}while(sum < 1);
			}
			
			aux.availability.clear();
			aux.availability.assign(availability.begin(), availability.end());
			list_patients.push_back(aux);
		}
		//cout << "D" << j << " " << list_patients.size() << endl;
		cout << list_patients.size() << endl;
		
		for(int i = 0; i <total_pat; i++){
			cout << list_patients[i].type << " " ;
			cout << list_patients[i].begin << " " ;
			cout << list_patients[i].end << " " ;
			cout << list_patients[i].sessions << " " ;
			cout << list_patients[i].interruptions << " " ;
			cout << list_patients[i].machine << " " ;
			cout << list_patients[i].first_time << " " ;
			cout << list_patients[i].time_ses << " ";
			for(int w = 0; w < working_days; w++){
			      for(int s = 0; s < shifts; s++){
				    cout << list_patients[i].availability[w][s] << " ";
			      }
			}
			cout << endl;
		}
		cout << endl;
	}
	
	return 0;
}


